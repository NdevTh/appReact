{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Header from \"../Components/Header\";\nimport InputText from \"../Components/InputText\";\nimport { theme } from \"../core/theme\";\nimport { emailValidator, passwordValidator } from \"../core/utils\";\nimport * as SQLite from 'expo-sqlite';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function (_React$Component) {\n  _inherits(LoginScreen, _React$Component);\n  var _super = _createSuper(LoginScreen);\n  function LoginScreen(props) {\n    var _this;\n    _classCallCheck(this, LoginScreen);\n    _this = _super.call(this, props);\n    _this.state = {\n      email: \"\",\n      password: \"\"\n    };\n    return _this;\n  }\n  _createClass(LoginScreen, [{\n    key: \"onLoginPressed\",\n    value: function onLoginPressed() {\n      var _this2 = this;\n      var emailError = emailValidator(this.state.email);\n      var passwordError = passwordValidator(this.state.password);\n      if (emailError || passwordError) {\n        alert();\n        return;\n      }\n      var db = SQLite.openDatabase(\"database.db\");\n      db.transaction(function (tx) {\n        tx.executeSql(\"select * from user\", [], function (_, _ref) {\n          var _array = _ref.rows._array;\n          console.log(\"login\");\n          console.log(_array);\n          var userConnect = false;\n          for (var i = 0; i < _array.length; i++) {\n            if (_array[i].mail == _this2.state.email && _array[i].mdp == _this2.state.password) {\n              userConnect = true;\n              _this2.props.navigation.navigate('Dashboard', {\n                username: _array[i].name\n              });\n            }\n          }\n          if (userConnect == false) {\n            Alert.alert('Erreur', 'L\\'email ou le mot de passe est incorrect', [{\n              text: 'OK',\n              onPress: function onPress() {\n                return console.log('OK Pressed');\n              }\n            }], {\n              cancelable: false\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var data = null;\n      var good = false;\n      var navigate = this.props.navigation.navigate;\n      return _jsxs(View, {\n        children: [_jsx(Header, {\n          title: \"Connexion\"\n        }), _jsx(InputText, {\n          placeholder: \"Mot de passe \",\n          value: this.state.email,\n          toto: function toto(text) {\n            return _this3.setState({\n              email: text\n            });\n          }\n        }), _jsx(View, {\n          class: styles.view\n        }), _jsx(TextInput, {\n          placeholder: \"Mot de passe \",\n          label: \"Password\",\n          returnKeyType: \"done\",\n          style: {\n            height: 40,\n            borderColor: 'gray',\n            borderWidth: 1,\n            margin: 10\n          },\n          value: this.state.password,\n          onChangeText: function onChangeText(text) {\n            return _this3.setState({\n              password: text\n            });\n          },\n          secureTextEntry: true\n        }), _jsx(View, {\n          class: styles.view\n        }), _jsx(Button, {\n          onPress: function onPress() {\n            return _this3.onLoginPressed();\n          },\n          style: styles.button,\n          title: \"Connexion\"\n        }), _jsxs(View, {\n          style: styles.row,\n          children: [_jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigate('Registerscreen');\n            },\n            children: _jsx(Text, {\n              style: styles.link,\n              children: \"S'inscrire\"\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigate('ForgotPasswordscreen');\n            },\n            children: _jsx(Text, {\n              style: styles.link,\n              children: \"Mot de passe oubli\\xE9\"\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n  return LoginScreen;\n}(React.Component);\n;\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24\n  },\n  button: {\n    marginTop: 24\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  label: {\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n    marginLeft: 10\n  },\n  input: {\n    backgroundColor: \"white\"\n  },\n  view: {\n    height: 40\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","Alert","TouchableOpacity","StyleSheet","Text","View","TextInput","Button","Header","InputText","theme","emailValidator","passwordValidator","SQLite","jsx","_jsx","jsxs","_jsxs","LoginScreen","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","email","password","_createClass","key","value","onLoginPressed","_this2","emailError","passwordError","alert","db","openDatabase","transaction","tx","executeSql","_","_ref","_array","rows","console","log","userConnect","i","length","mail","mdp","navigation","navigate","username","name","text","onPress","cancelable","render","_this3","data","good","children","title","placeholder","toto","setState","class","styles","view","label","returnKeyType","style","height","borderColor","borderWidth","margin","onChangeText","secureTextEntry","button","row","link","Component","create","forgotPassword","width","alignItems","marginBottom","marginTop","flexDirection","color","colors","secondary","fontWeight","primary","marginLeft","input","backgroundColor"],"sources":["/Users/cthuynh/Documents/Documents - MacBook Pro de Ct/Mai/AppMobileRendu/projetMobile/StockManagement/appReact/gestion-stock/screens/LoginScreen.js"],"sourcesContent":["import React from 'react';\r\nimport { Alert, TouchableOpacity, StyleSheet, Text, View, TextInput, Button } from 'react-native';\r\nimport Header from '../Components/Header';\r\nimport InputText from '../Components/InputText'\r\nimport { theme } from '../core/theme';\r\nimport { emailValidator, passwordValidator } from '../core/utils';\r\nimport * as SQLite from 'expo-sqlite'\r\n\r\nclass LoginScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n    onLoginPressed () {\r\n        const emailError = emailValidator(this.state.email);\r\n        const passwordError = passwordValidator(this.state.password);\r\n        if (emailError || passwordError) {\r\n            alert()\r\n            return;\r\n        }\r\n        const db = SQLite.openDatabase(\"database.db\");\r\n        db.transaction(\r\n            tx => {\r\n                tx.executeSql(\"select * from user\", [], (_, { rows: { _array } }) =>{\r\n                    console.log(\"login\")\r\n                    // on voit ici les inscriptions\r\n                    console.log(_array)\r\n                    var userConnect = false\r\n                    for(var i=0; i<_array.length; i++){\r\n                        if(_array[i].mail == this.state.email && _array[i].mdp == this.state.password) {\r\n                            userConnect = true\r\n                            this.props.navigation.navigate('Dashboard', {username: _array[i].name});\r\n                        }\r\n                    }\r\n                    if(userConnect == false){\r\n                        Alert.alert(\r\n                            'Erreur',\r\n                            'L\\'email ou le mot de passe est incorrect',\r\n                            [\r\n                                {text: 'OK', onPress: () => console.log('OK Pressed')},\r\n                            ],\r\n                            {cancelable: false},\r\n                        );\r\n                    }\r\n                }\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    render(){\r\n        var data = null;\r\n        var good = false\r\n\r\n\r\n\r\n        const {navigate} = this.props.navigation;\r\n        return (\r\n            <View>\r\n                <Header title=\"Connexion\"/>\r\n\r\n                <InputText\r\n                    placeholder=\"Mot de passe \"\r\n                    value={this.state.email}\r\n                    toto={text => this.setState({ email: text })}\r\n                />\r\n                <View class={styles.view}></View>\r\n\r\n                <TextInput\r\n                    placeholder=\"Mot de passe \"\r\n                    label=\"Password\"\r\n                    returnKeyType=\"done\"\r\n                    style={{ height: 40, borderColor: 'gray', borderWidth: 1, margin: 10 }}\r\n                    value={this.state.password}\r\n                    onChangeText={text => this.setState({ password: text })}\r\n                    secureTextEntry\r\n                />\r\n                <View class={styles.view}></View>\r\n\r\n                <Button onPress={() => this.onLoginPressed()} style={styles.button} title=\"Connexion\"/>\r\n                <View style={styles.row}>\r\n                    <TouchableOpacity onPress={() => navigate('Registerscreen')}>\r\n                        <Text style={styles.link}>S'inscrire</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity onPress={() => navigate('ForgotPasswordscreen')}>\r\n                        <Text style={styles.link}>Mot de passe oublié</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n        );\r\n\r\n    }\r\n\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    forgotPassword: {\r\n        width: '100%',\r\n        alignItems: 'flex-end',\r\n        marginBottom: 24,\r\n    },\r\n    button: {\r\n        marginTop: 24,\r\n    },\r\n    row: {\r\n        flexDirection: 'row',\r\n        marginTop: 4,\r\n    },\r\n    label: {\r\n        color: theme.colors.secondary,\r\n    },\r\n    link: {\r\n        fontWeight: 'bold',\r\n        color: theme.colors.primary,\r\n        marginLeft: 10\r\n    },\r\n    input: {\r\n        backgroundColor: \"white\",\r\n    },\r\n    view: {\r\n        height: 40\r\n    }\r\n});\r\n\r\nexport default (LoginScreen)\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}